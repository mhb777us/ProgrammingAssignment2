num_vect >= 6
z <- matrix(1:12, ncol = 3, nrow = 4)
z
solve (z)
z <- matrix(1:9, ncol = 3, nrow = 3)
z
solve (z)
z <- matrix(10,20,40,60, 110,99, ncol = 3, nrow = 3)
z <- matrix(c(10,20,40,60, 110,99), ncol = 3, nrow = 3)
z
solve (z)
y <- solve(z)
a <- matrix(c(3,1,2,1),nrow=2,ncol=2)
a
b <- matrix(c(8,2),nrow=2,ncol=1)
b
solve(a,b)
solve(a)
a
a <- matrix(1:16, row=4, col=4)
?matrix
a <- matrix(1:16, nrow=4, ncol=4)
a
solve(a)
a <- matrix(c(3,1,2,1),nrow=2,ncol=2)
solve(a)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(matrix) m <<- matrix
getmatrix <- function() m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmatrix(m)
m
}
x
y
a <- matrix(c(3,1,2,1),nrow=2,ncol=2)
a
cacheSolve (a)
makeCacheMatrix (a)
cacheSolve (a)
cacheSolve (a, ...)
makeCacheMatrix.set(a)
makeCacheMatrix$set(a)
makeCacheMatrix$setmatrix(a)
makeCacheMatrix.setmatrix(a)
makeCacheMatrix(setmatrix(a))
cacheSolve (a)
m <- x$getmatrix()
x <- a
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
x
y
rm (y)
set <- function(y) {
x <<- y
m <<- NULL
}
x
get <- function() x
setmatrix <- function(matrix) m <<- matrix
setmatrix <- function(matrix) m <<- matrix
getmatrix <- function() m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
m <- x$getmatrix()
m
m <- solve(data, ...)
m <- solve(data)
data <- x$get()
x$setmatrix(m)
a <- makeVector(c(5,1,3))
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a <- makeVector(c(1,2,3,4))
a
cachemean (a)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(matrix) m <<- matrix
getmatrix <- function() m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setmatrix(m)
m
}
x <- makeCacheMatrix (a)
x
cacheSolve (x)
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setmatrix(m)
m
}
cacheSolve (x)
cacheSolve <- function(matrix(x)) {
## Return a matrix that is the inverse of 'x'
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setmatrix(m)
m
}
cacheSolve <- function(matrix(x), ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setmatrix(m)
m
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setmatrix(m)
m
}
x <- makeCacheMatrix (a)
cacheSolve (x)
x <- makeCacheMatrix (matrix(1:4, nrow(2), ncol(2))
)
x
a <- makeVector(c(1,2,3,4))
a
cachemean (a)
x <- makeCacheMatrix (matrix(1:4, nrow(2), ncol(2))
)
x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
data <- x$getmean()
data <- x$getmatrix()
m <- solve(data)
m <- x$get()
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setmatrix(m)
m
}
x <- makeCacheMatrix (matrix(1:4, nrow(2), ncol(2)))
m <- x$getmatrix()
data <- x$get()
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(matrix) m <<- matrix
getmatrix <- function() m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
## Write a short comment describing this function
x <- makeCacheMatrix (matrix(1:4, nrow(2), ncol(2)))
z
x
m <- x$getmatrix()
data <- x$get()
traceback()
makeCacheMatrix <- function(x = as.matrix(x)) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(matrix) m <<- matrix
getmatrix <- function() m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
## Write a short comment describing this function
x <- makeCacheMatrix (matrix(1:4, nrow(2), ncol(2)))
data <- x$get()
x
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(matrix) m <<- matrix
getmatrix <- function() m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setmatrix(m)
m
}
data <- as.matrix(x$get())
data <- x$get()
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(matrix) m <<- matrix
getmatrix <- function() m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
rm (x, a, y)
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(matrix) m <<- matrix
getmatrix <- function() m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(as.metrix(data))
x$setmatrix(m)
m
}
x <- makeCacheMatrix (matrix(1:4, nrow(2), ncol(2)))
cacheSolve(x)
a <- matrix(1:4, nrow(2), ncol(2))
rm(x)
rm(a)
a <- matrix(1:4, nrow(2), ncol(2))
?matrix
a <- matrix(1:4, nrow = 2, ncol = 2)
A
a
x <- makeCacheMatrix (a)
x
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean (a)
m <- x$getmean()
data <- x$get()
data
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(matrix) m <<- matrix
getmatrix <- function() m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(as.metrix(data))
x$setmatrix(m)
m
}
x <- makeCacheMatrix (a)
x
x <- makeCacheMatrix (a)
cacheSolve (x)
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setmatrix(m)
m
}
cacheSolve (x)
a
solve(a)
cachemean (x)
b = matrix(c(10,20,40,70), nrow =2, ncol=2)
b
x <- makeCacheMatrix (b)
cachemean (x)
cacheSolve (x)
x <- makeCacheMatrix (a)
cacheSolve (x)
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setmatrix(m)
m
m <- x$getmatrix()
m
if(!is.null(m)) {
message("getting cached data")
return(m)
}
if(!is.null(m)) {
message("getting cached data")
# return(m)
m
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
##setwd("/Users/terasoft/ProgrammingAssignment2")
x <- a
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(matrix) m <<- matrix
getmatrix <- function() m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
## Write a short comment describing this function
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setmatrix(m)
m
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
##setwd("/Users/terasoft/ProgrammingAssignment2")
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(matrix) m <<- matrix
getmatrix <- function() m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
## Write a short comment describing this function
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setmatrix(m)
m
}
